/**
  * S-expression parser.
  *
  * Atom: 42, foo, bar, "Hello World"
  *
  * List: (), (+ 5 x), (print "hello")
  */

// Lexical Grammar (tokens):

%lex

%%

\s+                 /* skip whitespace */
\"[^\"]*\"          return 'STRING'

\d+                 return 'NUMBER'

[\w-+*=<>/]+        return 'SYMBOL'

/lex

// Syntactic Grammar (BNF):

%%

Expr
  : Atom
  | List
  ;

Atom
  : NUMBER { $$ = Number($1) }
  | STRING
  | SYMBOL
  ;

List
  : '(' ListEntries ')' { $$ = $2 }
  ;

// (Expr Expr Expr ...)

// ListEntries Expr
// ListEntries Expr Expr
// ListEntries Expr Expr Expr ...

ListEntries
  : ListEntries Expr { $1.push($2); $$ = $1 }
  | /* empty */      { $$ = [] }
  ;